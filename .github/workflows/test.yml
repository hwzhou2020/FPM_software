name: Test FPM Software

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set UTF-8 encoding (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        chcp 65001
        $env:PYTHONIOENCODING = "utf-8"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test installation script
      run: |
        python install_fpm.py --test
    
    - name: Test basic imports
      run: |
        python -c "import numpy; import scipy; print('[OK] Core scientific packages import successfully')"
    
    - name: Test main module structure
      run: |
        python -c "
        import os
        import sys
        sys.path.insert(0, '.')
        
        # Test that main.py can be parsed (syntax check)
        with open('main.py', 'r') as f:
            code = f.read()
        compile(code, 'main.py', 'exec')
        print('[OK] Main module syntax is valid')
        
        # Test that required files exist
        required_files = ['main.py', 'requirements.txt', 'README.md', 'LICENSE']
        for file in required_files:
            if os.path.exists(file):
                print(f'[OK] {file} exists')
            else:
                print(f'[MISSING] {file}')
                sys.exit(1)
        "
    
    - name: Test launcher scripts (syntax check)
      run: |
        python -c "
        import os
        import sys
        
        # Test launcher scripts syntax
        launcher_files = ['launch_fpm_professional.py', 'launch_fpm_no_splash.py']
        for file in launcher_files:
            if os.path.exists(file):
                with open(file, 'r') as f:
                    code = f.read()
                compile(code, file, 'exec')
                print(f'[OK] {file} syntax is valid')
            else:
                print(f'[MISSING] {file}')
        "
